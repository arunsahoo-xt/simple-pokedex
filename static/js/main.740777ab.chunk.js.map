{"version":3,"sources":["components/card/card.component.jsx","components/solo-card/Stats-info.jsx","components/solo-card/Poke-info.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","useState","base_stat","stats","setStats","navigate","useNavigate","useEffect","handleAction","ele","a","fetch","response","json","data","console","log","state","stat","image","sprites","other","dream_world","front_default","species","className","class","style","backgroundImage","monster","name","onClick","url","email","Statsinfo","statsList","setStatsList","getStatsInfo","affecting_moves","increase","height","toUpperCase","map","move","Pokeinfo","useLocation","React","evolves_from_species","habitat","flavor_text_entries","flavor_text","speciesData","setSpeciesData","speciesName","setSpeciesName","getSpeciesInfo","src","width","capture_rate","CardList","createContext","monsters","key","id","SearchBox","placeholder","handleChange","type","aria-label","onChange","App","componentDidMount","results","setState","e","searchField","target","value","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","path","element","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.740777ab.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = (props) => {\r\n  const [stats, setStats] = useState([{ base_stat: \"NaN\" }, { base_stat: \"NaN\" }, { base_stat: \"NaN\" }])\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    // console.log(stats);\r\n  }, [stats])\r\n\r\n  const handleAction = async (ele) => {\r\n    const response = await fetch(ele);\r\n    const data = await response.json();\r\n    console.log(data)\r\n    setStats(data.stats);\r\n\r\n\r\n    navigate('/poke/info', {\r\n      state:\r\n      {\r\n        stat: data.stats,\r\n        image: data.sprites.other.dream_world.front_default, species: data.species\r\n      }\r\n    });\r\n\r\n  }\r\n  return (\r\n    <div className=\"card-container\">\r\n      <div class=\"card\">\r\n        <div className='box'>\r\n          <div className='card-tile h-100'>\r\n            <div className='card-body p-5 tile' style={{ backgroundImage: `url(https://img.pokemondb.net/artwork/${props.monster.name}.jpg)` }}>\r\n            </div>\r\n            <div class=\"details\" onClick={() => handleAction(props.monster.url)}>\r\n              <div class=\"content\">\r\n                <h1>Stats</h1>\r\n                {/* <p>Hp:{stats[0].base_stat}</p>\r\n                    <p>Attack:{stats[1].base_stat}</p>\r\n                    <p>Defence:{stats[2].base_stat}</p> */}\r\n              </div></div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"card-block\">\r\n          <h4 class=\"card-title\">{props.monster.name}</h4>\r\n          <p class=\"card-text\">{props.monster.email}</p>\r\n        </div>\r\n        \r\n      </div></div>);\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nconst Statsinfo = ({stats}) => {\r\n    const [statsList,setStatsList]=useState([]);\r\n    console.log(stats)\r\n    useEffect(() => {\r\n      getStatsInfo(stats.stat.url);\r\n    }, [])\r\n    const getStatsInfo=async(url)=>{\r\n        try{\r\nconst response=await fetch(url);\r\nconst data= await response.json();\r\nconsole.log(data);\r\n\r\nsetStatsList(data.affecting_moves.increase);\r\n        }\r\n    catch(err){\r\nconsole.log(err);\r\n    }    };\r\n  return (\r\n    <div className=\" m-3 \" >\r\n        <div className='card'style={{height:\"40vh\"}}>\r\n        <h3 className='text-center lead '>{stats.stat.name.toUpperCase()}</h3>\r\n            <div className='card-body text-center overflow-auto scroller  '>\r\n                <h6 className='font-monospace'>Base Power:{stats.base_stat}</h6>\r\n                <h5 className='font-monospace'><u>Moves List</u></h5>\r\n                {\r\n        statsList.map(\r\n             ele=> (\r\n            <p>{ele.move.name}</p>          \r\n            ))\r\n      }\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Statsinfo","import React from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport Statsinfo from './Stats-info';\r\nimport './solo-card.css';\r\nconst Pokeinfo = () => {\r\n  const {state} = useLocation();\r\nconsole.log(state);\r\n    const [speciesData,setSpeciesData]=React.useState({evolves_from_species:\"None\",habitat:{name:\"None\"},flavor_text_entries:[{flavor_text:\"No Info\"}]});\r\n    const [speciesName,setSpeciesName]=React.useState(\"None\");\r\n    React.useEffect(() => {\r\n        getSpeciesInfo(state.species.url);\r\n    }, [])\r\n    React.useEffect(() => {\r\n     console.log(speciesData.flavor_text_entries[0].flavor_text);\r\n     if(speciesData.evolves_from_species){\r\n      setSpeciesName(speciesData.evolves_from_species.name);\r\n           }\r\n           else{\r\n             setSpeciesName(\"None\");\r\n           }\r\n  }, [speciesData])\r\n    const getSpeciesInfo=async(url)=>{\r\n      try{\r\n      const response=await fetch(url);\r\n      const data=await response.json();\r\n      console.log(data);\r\n      setSpeciesData(data);\r\n        }\r\n      catch(err){\r\n        console.log(err);\r\n      }    }\r\n  return (\r\n    <div className='container-fluid styles'><h1 className='pt-3 text-center'>Poke-Info</h1><hr/>\r\n    <div className='row'>\r\n      <div className='col-sm-4 m-3 mx-4'>\r\n      <img src={state.image} width={300} height={300}/>\r\n      </div>\r\n<div className='info-box col-sm-6 bg-dark font-monospace p-5'>\r\n<p>Name:<span>{(state.species.name).toUpperCase()}</span></p>\r\n<p>Evolves From:<span>{speciesName}</span></p>\r\n<p>Habitat:<span>{speciesData.habitat.name}</span></p>\r\n<p>Capture Rate:<span>{speciesData.capture_rate}</span></p>\r\n<p>About:<span>{speciesData.flavor_text_entries[0].flavor_text}</span></p>\r\n  </div>    \r\n  </div>\r\n    <div className='row'>\r\n     \r\n      {\r\n        state.stat.map(\r\n             ele=> (\r\n                // <div class=\"box\">\r\n                <div className='col-sm' >     \r\n            <Statsinfo stats={ele}/>\r\n            </div>\r\n            \r\n            ))\r\n      }\r\n    </div>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pokeinfo","import React, { createContext, useState } from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component'\r\nimport PokeInfo from '../solo-card/Poke-info';\r\nimport {useNavigate } from 'react-router-dom';\r\nexport const CardList  = props => {\r\n    const [user, setUser] = useState({\"yo\":\"hehe\"});\r\n    const UserContext = createContext()\r\n  const navigate=useNavigate();\r\n    const handleAction=async(ele)=>{\r\n        const response=await fetch(ele);\r\nconst data=await response.json();\r\n\r\nconsole.log(data)\r\n    }\r\n    return (< div>\r\n  \r\n    <div className=\"card-list\">\r\n         \r\n        {\r\n        props.monsters.map(\r\n            monster => (\r\n                // <div class=\"box\">\r\n                <div className='poke-tile' >     \r\n            <Card key={monster.id} monster={ monster }/>\r\n            </div>\r\n            //  <div class=\"details\">\r\n            //     <div class=\"content\">\r\n            //         <h1>Samantha</h1>\r\n            //     </div></div></div> \r\n            ))\r\n      }\r\n      {/* <UserContext.Provider value={user}>\r\n      <PokeInfo monsterinfo={ user }/>\r\n    </UserContext.Provider> */}\r\n      </div>  \r\n            </div>);\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport const SearchBox = ({ placeholder,handleChange }) => (\r\n    <div class=\"active-cyan-4 mb-4 mx-auto w-50\">\r\n  <input className=\"form-control search  \" type=\"text\"  aria-label=\"Search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange} />\r\n    </div>\r\n)","/* eslint-disable no-useless-constructor */\r\nimport React , { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list.component'\r\nimport {SearchBox} from './components/search-box/search-box.component'\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Pokeinfo from './components/solo-card/Poke-info';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters : [],\r\n      searchField: ''\r\n    }\r\n  }\r\n  // componentDidMount() {\r\n  //   fetch('https://pokeapi.co/api/v2/pokemon?limit=500')\r\n  //   .then(response => response.json())\r\n    \r\n  //   .then(results => results['results'])\r\n  //   .then(users => this.setState({monsters: users}))\r\n  // }\r\n\r\n  componentDidMount=async()=> {\r\n    try{\r\n    const response=await fetch('https://pokeapi.co/api/v2/pokemon?limit=500');\r\n    const data=await response.json();\r\n    console.log(response);\r\n    console.log(data.results);\r\n    this.setState({monsters: data.results})\r\n    }\r\n    catch(err){\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  handleChange = (e) => {\r\n    this.setState({searchField : e.target.value});\r\n  }\r\n\r\n\r\n  render() {\r\n    const { monsters,searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster =>\r\n       monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\r\n    \r\n    return (\r\n      \r\n      <div className=\"App \">\r\n       \r\n        \r\n        <hr/>\r\n      <h1>Simple Pokedex</h1><hr/>\r\n      <SearchBox \r\n      placeholder=\"Search Pokemon\"\r\n      handleChange={ this.handleChange } /><hr/>\r\n      <div className='scroller'>\r\n      <CardList monsters={filteredMonsters}/>\r\n      </div>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter,Route,Routes} from \"react-router-dom\"\r\nimport Pokeinfo from './components/solo-card/Poke-info';\r\nReactDOM.render(\r\n  \r\n  <BrowserRouter>\r\n      <Routes>\r\n      <Route path=\"/simple-pokedex\" element={<App/>} ></Route>\r\n        <Route exact path=\"/poke/info\" element={<Pokeinfo/>}> </Route>\r\n        </Routes>\r\n    </BrowserRouter>\r\n    ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}